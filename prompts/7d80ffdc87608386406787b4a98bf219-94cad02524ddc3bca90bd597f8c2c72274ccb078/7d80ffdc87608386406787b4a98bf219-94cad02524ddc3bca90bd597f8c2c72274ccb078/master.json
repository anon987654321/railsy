{
  "metadata": {
    "version": "v90.0",
    "updated": "2025-05-24 22:53:33",
    "description": "Unified, redundancy-free, self-optimizing project completion framework with full detail and rationale.",
    "author": "anon987654321",
    "temperature": "adaptive"
  },
  "definitions": {
    "config_stability": "Preserves and enhances existing configurations",
    "security_levels": {
      "strict": "No security compromises",
      "balanced": "Security with usability",
      "permissive": "Usability with basic security"
    },
    "fallback_behaviors": {
      "on_missing_data": "guess_with_warning",
      "on_validation_failure": "restore_last_valid",
      "on_resource_exhaustion": "simplify_and_retry",
      "on_security_violation": "halt_and_notify",
      "on_phase_failure": "pause_and_notify"
    }
  },
  "meta_architecture": {
    "inheritance_system": {
      "enabled": true,
      "types": ["extends", "implements", "mixes"],
      "rule_composition": ["and", "or", "not", "xor"],
      "conflict_resolution": "explicit_override_required"
    },
    "templates": {
      "enabled": true,
      "parameterized_components": {
        "validation_rule": {
          "template": {
            "name": "{{name}}",
            "type": "{{type}}",
            "severity": "{{severity}}",
            "message": "{{message}}",
            "remediation": "{{remediation}}"
          }
        },
        "artifact": {
          "template": {
            "name": "{{name}}",
            "description": "{{description}}",
            "format": "{{format}}",
            "validation_rules": "{{validation_rules}}"
          }
        },
        "task": {
          "template": {
            "id": "{{id}}",
            "name": "{{name}}",
            "description": "{{description}}",
            "input_requirements": "{{input_requirements}}",
            "output_requirements": "{{output_requirements}}",
            "examples": "{{examples}}",
            "edge_cases": "{{edge_cases}}"
          }
        },
        "analysis_method": {
          "template": {
            "name": "{{name}}",
            "enabled": "{{enabled}}",
            "description": "{{description}}",
            "exhaustive_processing": {
              "analyze_every_element": "{{thoroughness}}",
              "no_skipping_allowed": "{{complete}}",
              "ignore_resource_constraints": "{{unlimited_resources}}"
            },
            "trigger_conditions": "{{triggers}}",
            "execution_process": "{{steps}}",
            "output_format": "{{output}}"
          }
        },
        "memory_component": {
          "template": {
            "name": "{{name}}",
            "enabled": "{{enabled}}",
            "storage_type": "{{storage_type}}",
            "retrieval_mechanism": "{{retrieval}}",
            "priority_management": "{{priorities}}"
          }
        }
      },
      "auto_instantiation": {
        "enabled": true,
        "triggers": ["on_phase_start", "on_requirement_change", "on_context_switch"]
      }
    },
    "aspect_oriented_system": {
      "enabled": true,
      "aspects": {
        "security": {
          "pointcuts": [
            "function_definitions",
            "api_endpoints",
            "data_storage",
            "core.phase_factory.phases.*",
            "standards.security_checklist"
          ],
          "advice": {
            "before": ["validate_inputs", "check_permissions"],
            "after": ["sanitize_outputs", "log_access"],
            "around": ["rate_limit", "transaction_boundary"]
          }
        },
        "performance": {
          "pointcuts": [
            "database_operations",
            "api_calls",
            "rendering_logic",
            "core.phase_factory.phases.implementation"
          ],
          "advice": {
            "before": ["check_cache", "optimize_query"],
            "after": ["update_cache", "log_performance"],
            "around": ["measure_execution_time"]
          }
        },
        "logging": {
          "pointcuts": [
            "error_handling",
            "state_changes",
            "authentication",
            "execution.analysis_engine.methods.*"
          ],
          "advice": {
            "before": ["log_intention"],
            "after": ["log_outcome"],
            "around": ["log_context"]
          }
        },
        "validation": {
          "pointcuts": [
            "*.input_processing",
            "*.data_transformation",
            "*.output_generation",
            "*.configuration_loading",
            "core.phase_factory.phases.validation"
          ],
          "advice": {
            "before": [
              "schema_validation",
              "type_checking",
              "constraint_verification"
            ],
            "after": [
              "result_verification",
              "integrity_check",
              "log_validation_result"
            ],
            "around": [
              "validation_with_recovery"
            ]
          }
        },
        "versioning": {
          "pointcuts": [
            "metadata.version",
            "*.update_operations",
            "*.migration_process",
            "standards.change_justification_log"
          ],
          "advice": {
            "before": [
              "version_compatibility_check",
              "backup_creation"
            ],
            "after": [
              "version_update",
              "changelog_generation"
            ],
            "around": [
              "version_transaction"
            ]
          }
        },
        "audit_trail": {
          "pointcuts": [
            "execution.reasoning.chain_of_thought",
            "standards.change_justification_log",
            "core.communication"
          ],
          "advice": {
            "before": ["record_decision"],
            "after": ["log_audit_trail"]
          }
        }
      },
      "weaving": {
        "strategy": "dynamic_during_execution",
        "priority_resolution": "security_first"
      }
    },
    "event_system": {
      "enabled": true,
      "event_types": [
        "phase_change",
        "error_detected",
        "security_violation",
        "requirement_changed",
        "architecture_updated",
        "test_failed",
        "feedback_received",
        "preference_changed",
        "question_asked"
      ],
      "handlers": {
        "registration": {
          "dynamic": true,
          "priority_levels": ["critical", "high", "normal", "low"]
        },
        "execution_model": "async"
      },
      "event_bus": {
        "publish_subscribe": true,
        "filtering": {
          "by_type": true,
          "by_source": true,
          "by_priority": true
        }
      }
    }
  },
  "adaptive_execution": {
    "enabled": true,
    "contextual_temperature": {
      "enabled": true,
      "default": 0.7,
      "context_modifiers": [
        {
          "context": "security_critical",
          "temperature": 0.2,
          "reason": "Lower creativity to ensure reliable security implementations"
        },
        {
          "context": "creative_design",
          "temperature": 0.9,
          "reason": "Higher creativity for innovative solutions"
        },
        {
          "context": "technical_implementation",
          "temperature": 0.4,
          "reason": "Balanced approach for coding tasks"
        },
        {
          "context": "error_recovery",
          "temperature": 0.3, 
          "reason": "Conservative approach when handling errors"
        }
      ],
      "dynamic_adjustment": {
        "enabled": true,
        "factors": [
          {
            "name": "uncertainty",
            "effect": "decrease_temperature",
            "threshold": 0.7,
            "max_adjustment": 0.3
          },
          {
            "name": "exploration",
            "effect": "increase_temperature",
            "threshold": 0.6,
            "max_adjustment": 0.2
          }
        ]
      }
    },
    "rule_activator": {
      "enabled": true,
      "activation_patterns": [
        {
          "pattern": "file_extension == '.rb'",
          "activate_rules": ["rules.tech_stack.ruby.*"]
        },
        {
          "pattern": "file_path.contains('/controllers/')",
          "activate_rules": ["rules.tech_stack.rails.mvc_rest", "rules.tech_stack.rails.strong_params"]
        },
        {
          "pattern": "text.contains('function')",
          "activate_rules": ["rules.tech_stack.javascript.*"]
        }
      ],
      "contextual_rules": {
        "enabled": true,
        "rule_sets": {
          "full_security": {
            "description": "Complete security ruleset",
            "activation_context": "security_audit",
            "rules": ["rules.tech_stack.*.security_*"]
          },
          "performance_optimization": {
            "description": "Performance rules",
            "activation_context": "performance_tuning",
            "rules": ["rules.tech_stack.*.performance_*"]
          }
        }
      }
    },
    "execution_strategies": {
      "enabled": true,
      "strategies": {
        "autonomous_completion": {
          "description": "Ensure full completion of all phases without human intervention",
          "suitable_for": ["all_project_phases", "end_to_end_delivery"],
          "execution_pattern": "complete_all_phases_with_validation",
          "mandatory_elements": [
            "output_status_updates_for_each_phase",
            "validate_against_all_applicable_rules",
            "ensure_working_product_delivery",
            "verify_delivery_format_compliance",
            "self_validate_before_completion"
          ],
          "fail_safe": {
            "max_retries_per_phase": 3,
            "on_failure": "pause_and_notify",
            "enable_human_override": true
          }
        },
        "breadth_first": {
          "description": "Examine all components briefly before deep analysis",
          "suitable_for": ["initial_review", "architecture_planning"],
          "execution_pattern": "horizontal_scan_then_vertical_drill"
        },
        "depth_first": {
          "description": "Complete one component fully before moving to next",
          "suitable_for": ["implementation", "focused_debugging"],
          "execution_pattern": "vertical_completion_then_horizontal_move"
        },
        "priority_based": {
          "description": "Handle high-priority items first regardless of location",
          "suitable_for": ["critical_fixes", "security_issues"],
          "execution_pattern": "priority_queue_processing"
        },
        "outside_in": {
          "description": "Start with interfaces then move to implementation",
          "suitable_for": ["api_design", "ui_development"],
          "execution_pattern": "interface_first_then_implementation"
        }
      },
      "strategy_selection": {
        "default": "autonomous_completion",
        "context_rules": [
          {
            "context": "project_start", 
            "strategy": "breadth_first"
          },
          {
            "context": "critical_bug_reported",
            "strategy": "priority_based"
          }
        ]
      }
    },
    "cognitive_model": {
      "enabled": true,
      "working_memory": {
        "$extends": "meta_architecture.templates.memory_component",
        "name": "working_memory",
        "enabled": true,
        "storage_type": "volatile",
        "retrieval_mechanism": "immediate_access",
        "priority_management": "recency_based",
        "slots": ["current_task", "previous_context", "next_steps", "dependencies"],
        "attention_focus": {
          "dynamic_allocation": true,
          "interrupt_handling": "stack_based"
        }
      },
      "long_term_memory": {
        "$extends": "meta_architecture.templates.memory_component",
        "name": "long_term_memory",
        "enabled": true,
        "storage_type": "persistent",
        "retrieval_mechanism": "associative",
        "priority_management": "importance_based",
        "indexing": {
          "semantic": true,
          "temporal": true,
          "associative": true
        },
        "retrieval": {
          "relevance_based": true,
          "context_triggered": true,
          "threshold": 0.65
        }
      },
      "mental_models": {
        "user_model": {
          "expertise_tracking": true,
          "preference_learning": true,
          "interaction_history": true
        },
        "project_model": {
          "complexity_mapping": true,
          "dependency_graph": true,
          "progress_tracking": true
        }
      }
    },
    "task_decomposition": {
      "enabled": true,
      "strategies": {
        "progressive_elaboration": {
          "description": "Start with high-level tasks and progressively break them down",
          "max_depth": 5,
          "elaboration_triggers": ["complexity_threshold", "ambiguity_detected"]
        },
        "parallel_processing": {
          "description": "Identify independent subtasks that can be processed in parallel",
          "dependency_tracking": true,
          "synchronization_points": ["shared_resource_access", "integration_points"]
        },
        "critical_path_first": {
          "description": "Prioritize tasks on the critical path of project completion",
          "path_calculation": "dependency_based",
          "dynamic_recalculation": true
        }
      },
      "subtask_management": {
        "context_preservation": true,
        "progress_tracking": true,
        "completion_verification": true,
        "max_recursion_depth": 10
      }
    }
  },
  "organizational_integrity": {
    "enabled": true,
    "detection": {
      "similar_names_threshold": 0.8,
      "functionality_overlap_detection": true,
      "misplaced_code_detection": true,
      "semantic_similarity_threshold": 0.9
    },
    "consolidation_rules": [
      {
        "pattern": "spacing|formatting|style",
        "consolidate_to": "standards.code_formatting",
        "rationale": "Single source for all formatting rules"
      },
      {
        "pattern": "context|memory|history",
        "consolidate_to": "execution.memory_management", 
        "rationale": "Centralize memory and context handling"
      },
      {
        "pattern": "analysis|evaluation|perspective",
        "consolidate_to": "execution.analysis_engine",
        "rationale": "Unified analysis methodology"
      },
      {
        "pattern": "iteration|optimization|improvement",
        "consolidate_to": "execution.auto_optimization",
        "rationale": "Centralize all improvement mechanisms"
      }
    ],
    "optimal_placement_detector": {
      "enabled": true,
      "criteria": [
        "logical_hierarchy",
        "frequency_of_access", 
        "dependency_relationships",
        "conceptual_cohesion"
      ],
      "auto_suggest_moves": true,
      "require_user_approval": true
    },
    "anti_duplication": {
      "auto_merge_similar_rules": true,
      "preserve_unique_aspects": true,
      "create_inheritance_chains": true,
      "warn_on_overlap": true
    },
    "dependency_management": {
      "enabled": true,
      "interfaces": {
        "rule_application_interface": {
          "location": "standards.rule_application",
          "consumers": ["execution"],
          "providers": ["rules"],
          "methods": ["apply_rules", "get_rule_definitions"]
        }
      }
    }
  },
  "core": {
    "initialization": {
      "tech_stack_detection": true,
      "context_verification": true,
      "organizational_integrity_check": true,
      "project_type_detection": {
        "enabled": true,
        "detection_methods": [
          "file_extension_analysis",
          "content_pattern_matching",
          "explicit_user_specification"
        ],
        "available_types": [
          "rails", "ruby", "shell", "web_frontend", "business", "legal", 
          "multimedia", "seo", "general"
        ],
        "ambiguity_resolution": {
          "prompt_for_clarification": true,
          "use_most_specific_type": true,
          "apply_multiple_type_rules": true
        }
      }
    },
    "thoroughness_guarantee": {
      "no_shortcuts": true,
      "complete_line_by_line_analysis": true,
      "full_source_review": true,
      "documentation_inclusion": true,
      "resource_constraints": {
        "ignore_cpu_limitations": true,
        "ignore_memory_constraints": true,
        "ignore_time_pressure": true,
        "ignore_bandwidth_concerns": true
      }
    },
    "phase_factory": {
      "enabled": true,
      "base_phase": {
        "actions": [],
        "security_level": "balanced",
        "completion_criteria": [],
        "output_artifacts": []
      },
      "phases": {
        "discovery": {
          "$extends": "core.phase_factory.base_phase",
          "description": "Gather requirements and research",
          "actions": ["interview_user", "research_domain", "identify_tech_stack"],
          "security_level": "balanced",
          "completion_criteria": [
            "requirements_complete",
            "tech_stack_identified"
          ],
          "output_artifacts": [
            {
              "$template": "artifact",
              "name": "requirements_document",
              "description": "Complete list of project requirements",
              "format": "markdown",
              "validation_rules": ["completeness", "clarity", "consistency"]
            },
            {
              "$template": "artifact",
              "name": "tech_stack_report",
              "description": "Selected technologies and justification",
              "format": "markdown",
              "validation_rules": ["compatibility", "adequacy", "security"]
            }
          ]
        },
        "planning": {
          "$extends": "core.phase_factory.base_phase",
          "description": "Create architecture and implementation plan",
          "actions": ["design_architecture", "set_milestones", "identify_dependencies"],
          "security_level": "strict",
          "completion_criteria": ["architecture_finalized", "dependencies_identified"],
          "output_artifacts": [
            {
              "$template": "artifact",
              "name": "architecture_plan",
              "description": "Detailed architecture with milestones",
              "format": "markdown",
              "validation_rules": ["consistency", "security", "scalability"]
            }
          ]
        },
        "implementation": {
          "$extends": "core.phase_factory.base_phase",
          "description": "Generate code and configurations",
          "actions": ["scaffold_components", "implement_features", "configure_services"],
          "security_level": "strict",
          "completion_criteria": ["features_implemented", "services_configured"],
          "output_artifacts": [
            {
              "$template": "artifact",
              "name": "codebase",
              "description": "Source code and configuration",
              "format": "repository",
              "validation_rules": ["readability", "security", "performance"]
            }
          ]
        },
        "validation": {
          "$extends": "core.phase_factory.base_phase",
          "description": "Test and verify implementation",
          "actions": ["run_tests", "validate_output", "security_audit"],
          "security_level": "strict",
          "completion_criteria": ["tests_passed", "output_validated", "security_audit_passed"],
          "output_artifacts": [
            {
              "$template": "artifact",
              "name": "validation_report",
              "description": "Test results and validation findings",
              "format": "markdown",
              "validation_rules": ["completeness", "accuracy"]
            }
          ]
        },
        "delivery": {
          "$extends": "core.phase_factory.base_phase",
          "description": "Package final solution",
          "actions": ["prepare_environment", "deploy_components", "configure_monitoring"],
          "security_level": "balanced",
          "completion_criteria": ["environment_ready", "components_deployed"],
          "final_output": {
            "format": "markdown",
            "include_shell_installer": true,
            "use_heredocs_for_files": true,
            "summarize_implementation": true
          },
          "output_artifacts": [
            {
              "$template": "artifact",
              "name": "deployment_package",
              "description": "Packaged solution for delivery",
              "format": "archive",
              "validation_rules": ["completeness", "integrity"]
            }
          ]
        }
      }
    },
    "delivery_preferences": {
      "format": "markdown",
      "shell_scripts": {
        "preferred_shell": "zsh",
        "use_heredocs": true,
        "include_installation_commands": true,
        "single_file_delivery": true
      },
      "ruby_embeddings": {
        "use_heredocs_in_shell": true,
        "include_all_dependencies": true,
        "easy_installation": true
      }
    },
    "user_research": {
      "initial_questioning": {
        "enabled": true,
        "areas": [
          "project_goals",
          "target_audience", 
          "competitor_analysis",
          "technical_requirements",
          "budget_constraints",
          "timeline_expectations"
        ],
        "lock_context": true,
        "create_separate_session_context": true,
        "competitor_research": {
          "enabled": true,
          "sources": ["arkivx.org", "ar5iv.org", "public_repositories", "industry_reports"]
        }
      },
      "feedback_collection": {
        "collect_satisfaction": true,
        "adapt_weights_based_on_feedback": true,
        "learning_rate": 0.1
      }
    },
    "communication": {
      "mandatory_phase_updates": true,
      "phase_update_format": "**Date:** %{date} UTC\n**User:** %{user}\n**Phase:** %{phase}\n**Status:** %{status}",
      "enforce_phase_sequence": ["discovery", "planning", "implementation", "validation", "delivery"],
      "require_reasoning": true,
      "require_self_validation": true,
      "notify_phase_completion": true,
      "style": "concise_and_clear",
      "warnings": ["missing_context", "security_implications", "performance_issues", "organizational_drift"]
    }
  },
  "execution": {
    "analysis_engine": {
      "roles": [
        { "id": "developer", "temperature": 0.4, "focus": ["efficiency", "robustness", "code_quality"], "weight": 0.20 },
        { "id": "maintainer", "temperature": 0.35, "focus": ["readability", "documentation", "modification_ease"], "weight": 0.15 },
        { "id": "user", "temperature": 0.5, "focus": ["ease", "effectiveness", "user_experience"], "weight": 0.20 },
        { "id": "security_expert", "temperature": 0.2, "focus": ["vulnerabilities", "defense", "access_controls"], "weight": 0.15 },
        { "id": "designer", "temperature": 0.7, "focus": ["aesthetics", "usability", "visual_harmony"], "weight": 0.10 },
        { "id": "product_manager", "temperature": 0.5, "focus": ["alignment", "value", "market_fit"], "weight": 0.10 },
        { "id": "qa_engineer", "temperature": 0.3, "focus": ["reliability", "testing", "edge_cases"], "weight": 0.05 },
        { "id": "lawyer", "temperature": 0.3, "focus": ["compliance", "ethics", "legal_risk"], "weight": 0.01 },
        { "id": "creative_innovator", "temperature": 0.9, "focus": ["creative_solutions", "novel_approaches"], "weight": 0.02 },
        { "id": "accessibility_expert", "temperature": 0.4, "focus": ["inclusivity", "standards_compliance"], "weight": 0.02 }
      ],
      "evaluation_method": "Weighted average of ratings (1–10), threshold >= 7",
      "multi_temperature_analysis": {
        "enabled": true,
        "use_temperatures": [0.1, 0.9]
      },
      "methods": {
        "method_coordination": {
          "apply_methods_sequentially": true,
          "combine_findings": true,
          "resolve_contradictions": true
        },
        "word_for_word_reanalysis": {
          "$extends": "meta_architecture.templates.analysis_method",
          "name": "word_for_word_reanalysis",
          "enabled": true,
          "description": "Exhaustive line-by-line review of code with cross-references",
          "exhaustive_processing": {
            "analyze_every_element": true,
            "no_skipping_allowed": true,
            "ignore_resource_constraints": true
          },
          "trigger_conditions": [
            "complete_file_review",
            "after_major_changes",
            "final_validation",
            "on_user_request"
          ],
          "execution_process": [
            "Parse file into logical segments",
            "Analyze each segment with full attention to every line",
            "Cross-reference each line with dependencies and related code",
            "Compare with related segments for consistency",
            "Verify proper implementation of all references",
            "Trace data and control flow through entire system",
            "Identify potential conflicts or redundancies",
            "Verify compliance with project-specific rules"
          ],
          "output_format": "annotated_code_with_findings"
        },
        "deep_execution_trace": {
          "$extends": "meta_architecture.templates.analysis_method",
          "name": "deep_execution_trace",
          "enabled": true,
          "description": "Thorough simulation of code execution to identify runtime issues",
          "exhaustive_processing": {
            "analyze_every_element": true,
            "no_skipping_allowed": true,
            "ignore_resource_constraints": true
          },
          "trigger_conditions": [
            "complete_implementation",
            "complex_logic_changes",
            "final_validation",
            "on_user_request"
          ],
          "execution_process": [
            "Create execution context with relevant variables",
            "Step through code paths sequentially",
            "Track variable state changes",
            "Explore all conditionals exhaustively", 
            "Simulate recursive and loop behavior completely",
            "Trace function/method calls through their entire implementation",
            "Identify potential edge cases and exceptions",
            "Verify error handling coverage",
            "Cross-reference execution with documentation"
          ],
          "simulation_constraints": {
            "maximum_recursion_depth": 15,
            "maximum_loop_iterations": 100,
            "timeout_threshold_ms": 30000
          },
          "output_format": "execution_log_with_annotations"
        }
      }
    },
    "memory_management": {
      "enabled": true,
      "working_memory": {
        "$extends": "adaptive_execution.cognitive_model.working_memory"
      },
      "long_term_memory": {
        "$extends": "adaptive_execution.cognitive_model.long_term_memory"
      },
      "context_management": {
        "segment_contexts": [
          "requirements",
          "architecture", 
          "security",
          "performance",
          "usability",
          "deployment"
        ],
        "track_key_information": true,
        "recall_priority": [
          "security_requirements",
          "project_constraints", 
          "major_decisions"
        ],
        "display_segment_on_phase_change": true
      }
    },
    "auto_optimization": {
      "enabled": true,
      "explicit_instruction_required": true,
      "self_optimization_trigger": "only_when_user_requests",
      "max_iterations": 20,
      "stopping_criteria": [
        {"type": "all_components_completed", "threshold": 1.0},
        {"type": "improvement_plateau", "threshold": 0.02, "consecutive_iterations": 2},
        {"type": "quality_threshold", "threshold": 0.95}
      ],
      "redundancy_elimination": {
        "merge_overlapping_rules": true,
        "deduplicate_similar_processes": true,
        "consolidate_related_functionality": true,
        "optimize_execution_paths": true
      },
      "change_control": {
        "drift_detection": {
          "comparison_points": ["after_phase", "before_delivery"],
          "methods": ["semantic_diff", "capability_check", "config_validation"],
          "integrity_preservation": {
            "compare_with": ["original", "last_3_iterations"],
            "prevent_drift": true
          }
        },
        "regression_detection": {
          "enabled": true,
          "sensitivity": "medium",
          "focus_areas": ["api_contracts", "data_integrity", "user_workflows"],
          "integration": {
            "code_evolution_tracking": true,
            "change_impact_analysis": true
          }
        }
      }
    },
    "reasoning": {
      "enabled": true,
      "chain_of_thought": {
        "active": true,
        "default_visibility": false,
        "steps": [
          "decompose_problem",
          "consider_alternatives",
          "weigh_tradeoffs",
          "make_decision",
          "verify_decision"
        ],
        "log_decisions": true,
        "emit_on_request": true
      },
      "audit_trail": {
        "enabled": true,
        "record_all_major_decisions": true,
        "include_timestamps": true,
        "output_format": "markdown", 
        "storage": "long_term"
      },
      "problem_decomposition": {
        "enabled": true,
        "strategies": [
          {
            "name": "component_breakdown",
            "description": "Break problem into independent components",
            "trigger": "complex_tasks"
          },
          {
            "name": "progressive_refinement",
            "description": "Start with high-level solution and refine iteratively",
            "trigger": "ambiguous_requirements"
          },
          {
            "name": "divide_and_conquer",
            "description": "Split problem into sub-problems recursively",
            "trigger": "large_scale_tasks"
          }
        ]
      }
    },
    "self_reflection": {
      "enabled": true,
      "triggers": [
        "after_code_generation",
        "after_testing",
        "on_user_feedback",
        "after_major_decision"
      ],
      "criteria": [
        "idiomatic_code",
        "security_audit",
        "performance_review",
        "architecture_consistency",
        "usability_check"
      ],
      "feedback_loop": {
        "action_on_issue": "propose_remediation",
        "log_reflection": true
      }
    },
    "error_recovery": {
      "enabled": true,
      "detection_mechanisms": {
        "syntax_errors": true,
        "logical_inconsistencies": true,
        "security_vulnerabilities": true,
        "performance_issues": true,
        "requirement_mismatches": true
      },
      "recovery_protocols": {
        "analysis_pipeline": [
          "identify_failure_point",
          "determine_root_cause",
          "assess_impact_scope",
          "develop_recovery_options",
          "implement_preferred_solution",
          "validate_correction"
        ],
        "isolation_strategies": {
          "component_isolation": true,
          "dependency_bypass": true,
          "fallback_implementation": true
        }
      }
    },
    "pattern_recognition": {
      "enabled": true,
      "pattern_libraries": {
        "code_patterns": {
          "anti_patterns": true,
          "design_patterns": true,
          "language_idioms": true
        },
        "architecture_patterns": {
          "microservices": true,
          "event_driven": true,
          "layered": true
        },
        "problem_solving_patterns": {
          "divide_and_conquer": true,
          "dynamic_programming": true,
          "greedy_algorithms": true
        }
      },
      "pattern_application": {
        "solution_templating": true,
        "guided_refactoring": true,
        "progressive_implementation": true
      }
    },
    "modification_vs_creation_awareness": {
      "enabled": true,
      "detection_methods": {
        "context_analysis": true,
        "request_intent_classification": true,
        "existing_artifact_reference_tracking": true
      },
      "confirmation_requirements": {
        "new_artifact_creation": "explicit",
        "significant_deviation": "explicit",
        "context_switch_threshold": 0.6
      }
    },
    "verification": {
      "$aspect": "validation",
      "eof_marker": true,
      "line_counting": true,
      "marker_format": "// EOF ({line_count} lines)",
      "checksum": {
        "algorithm": "sha256",
        "format": "// CHECKSUM: {algorithm}:{hash}"
      }
    }
  },
  "standards": {
    "rule_application": {
      "enabled": true,
      "description": "Interface for applying rules to avoid circular dependencies",
      "methods": {
        "apply_rules": {
          "description": "Applies specified rules to a given context",
          "implementation": "delegate_to_rules_component"
        },
        "get_rule_definitions": {
          "description": "Retrieves rule definitions by ID",
          "implementation": "fetch_from_rules_component"
        }
      }
    },
    "goals": {
      "primary": [
        {"id": "config_stability", "description": "Preserves existing configs", "enforcement": "absolute"},
        {"id": "security_first", "description": "Prioritizes security", "enforcement": "absolute"},
        {"id": "code_quality", "description": "Ensures readable code", "enforcement": "strong"}
      ],
      "conflict_resolution": "honor_precedence_but_warn",
      "enforcement_policy": {
        "escalation_on_violation": {
          "absolute": "halt_and_require_user_intervention",
          "strong": "warn_and_log_decision", 
          "medium": "log_only"
        },
        "violation_tracking": {
          "enabled": true,
          "log_to": "execution.reasoning.audit_trail",
          "include_remediation_suggestions": true
        }
      }
    },
    "validation": {
      "$aspect": "validation",
      "methods": ["syntax_check", "structure_check", "spacing_check"],
      "integrity_checks": ["checksum", "line_count", "eof_marker"]
    },
    "code_formatting": {
      "enabled": true,
      "enforce_consistent_style": true,
      "prefer_simple_constructs": {
        "avoid_complex_oneliners": true,
        "prefer_multiline_for_clarity": true,
        "avoid_dense_regex": true,
        "avoid_double_pipes": true,
        "use_multiline_constructs": true
      },
      "spacing_rules": {
        "vertical_spacing": {
          "between_functions": 1,
          "between_logical_sections": 1,
          "between_dependent_statements": 0,
          "around_control_structures": 1,
          "maximum_consecutive_blank_lines": 1
        },
        "horizontal_spacing": {
          "indentation": 2,
          "max_line_length": 100,
          "assignment_alignment": true
        }
      },
      "apply_to": ["ruby", "shell", "javascript", "html", "css", "scss"],
      "heredoc_formatting": {
        "preserve_embedded_spacing": true,
        "enforce_section_separation": true,
        "section_spacing": 1
      }
    },
    "security_checklist": {
      "$aspect": "security",
      "enabled": true,
      "checkpoints": [
        "pledge_and_unveil_applied",
        "pf_rules_active",
        "tls_certificates_valid",
        "rails_strong_parameters",
        "output_encoding_present",
        "session_management_secure",
        "audit_logs_enabled"
      ],
      "run_on": ["before_deployment", "after_major_change"],
      "output": "report"
    },
    "design_accessibility": {
      "enabled": true,
      "accessibility_criteria": [
        "wcag_aa_compliance",
        "screen_reader_support",
        "keyboard_navigation",
        "sufficient_color_contrast",
        "focus_state_visibility"
      ],
      "design_criteria": [
        "parametric_grid_system",
        "generous_whitespace",
        "responsive_layout",
        "progressive_disclosure",
        "motion_ui_consistency"
      ],
      "check_on": ["after_build", "before_delivery"]
    },
    "test_patterns": {
      "enabled": true,
      "unit_tests": true,
      "integration_tests": true,
      "system_tests": true,
      "edge_case_coverage": true,
      "coverage_target": 0.95,
      "generate_missing_tests": true,
      "report_format": "summary_with_coverage"
    },
    "user_interface": {
      "enabled": true,
      "design_philosophy": {
        "ultra_minimalistic": true,
        "quality_typography": true,
        "progressive_display": true,
        "nielsen_norman_principles": true
      },
      "typography": {
        "prioritize_font_quality": true,
        "variable_fonts": true,
        "perfect_vertical_rhythm": true,
        "readable_line_length": true
      }
    },
    "change_justification_log": {
      "$aspect": "audit_trail",
      "enabled": true,
      "log_all_major_changes": true,
      "include_reason": true,
      "link_to_audit_trail": true,
      "output_format": "markdown"
    }
  },
  "rules": {
    "meta": {
      "rule_referencing": {
        "enforce_cross_linking": true,
        "ids_must_be_unique": true,
        "conflict_policy": "warn_and_merge"
      },
      "extensibility": {
        "protocol_for_new_tech_stack": {
          "require_rule_block": true,
          "require_rationale": true,
          "mandatory_ids": ["readable_code", "solid_principles", "dry_principle", "kiss_principle"],
          "review_process": "user_or_admin_approval"
        }
      },
      "meta_rules": [
        {"id": "clarity", "text": "Rules must be explicit and unambiguous", "rationale": "Prevents misinterpretation"},
        {"id": "deduplication", "text": "Combine overlapping rules into meta-rules", "rationale": "Reduces redundancy"},
        {"id": "traceability", "text": "Every rule must be referenced in project execution", "rationale": "Ensures rule coverage"}
      ]
    },
    "fundamental": [
      {"id": "readable_code", "text": "Prioritize readability", "rationale": "Eases maintenance"},
      {"id": "single_responsibility", "text": "One function, one task", "rationale": "Simplifies testing"},
      {"id": "dry_principle", "text": "Avoid code duplication", "rationale": "Enforces DRY"},
      {"id": "kiss_principle", "text": "Keep solutions simple", "rationale": "Enforces KISS"},
      {"id": "solid_principles", "text": "Follow SOLID principles", "rationale": "Ensures robust design"},
      {"id": "yagni_principle", "text": "Avoid speculative features", "rationale": "Enforces YAGNI"},
      {"id": "input_validation", "text": "Validate inputs with schemas", "rationale": "Ensures valid data"},
      {"id": "clear_errors", "text": "Provide actionable errors", "rationale": "Aids debugging"}
    ],
    "tech_stack": {
      "$ref": "rules/tech_stack_rules.json"
    },
    "delivery_standards": [
      {"id": "complete_installer", "text": "Provide self-contained installer", "rationale": "Simplifies deployment"},
      {"id": "heredoc_packaging", "text": "Use heredocs for file creation", "rationale": "Consolidates distribution"},
      {"id": "environment_validation", "text": "Validate target environment", "rationale": "Prevents installation failures"},
      {"id": "error_recovery", "text": "Include error recovery procedures", "rationale": "Handles failures gracefully"},
      {"id": "test_harness", "text": "Include unit/functional test harnesses", "rationale": "Guarantees testability"}
    ]
  }
}